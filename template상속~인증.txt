이제 template 상속을 알아볼겁니당
지금 작업중인 blog app 폴더 말고, 원래 있던 project폴더에 templates 폴더 생성 후, base.html을 만들어 줍니다. 
예시로 네비게이션 바를 작성 후에, 상속 되고 싶은 위치에
<div class="container">

        {% block content %}
        {% endblock %}

</div>
를 입력해주고, home.html에 위아래 싹 지우고
{% extends 'base.html' %}

{% block content %}

...

{% endblock %}
입력해준 뒤에, settings.py에 
TEMPLATES = [
	'DIRS' : ['testproject/templates']
]
입력해준뒤에 서버 돌려!

하하 어때요 잘 되었지요?
html 뿐만 아니라, urls.py도 사용이 가능한데, app이 많아지고 대형 프로젝트가 될수록 url관리하기가 빡세지는데, 이때 아주 유용하게 쓰입니다.
blog app안에 urls.py파일을 만들어주고

from django.contrib import admin
from django.urls import path
from .views import *                                 ->수정

urlpatterns = [
    path('<str:id>', detail, name="detail"),        -> admin 이랑 home은 빼고 복붙해와용
    path('new/', new, name="new"),
    path('create/', create, name="create"),
    path('edit/<str:id>', edit, name="edit"),
    path('update/<str:id>', update, name="update"),
    path('delete/<str:id>', delete, name="delete"),
]

그럼 원래 있던 urls.py에는 이렇게 바꿔줍니다.

from django.contrib import admin
from django.urls import path, include            ->include 추가
from blog.views import home                     ->*에서 home으로 수정

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home, name="home"),
    path('blog/', include('blog.urls')),               ->추가
]

런서버 해보면 이상이 없쥬! 조아쓰

이제 static을 배워볼건데요, static이 뭘까요?
정적인 의미를 담고 있습니다.
정적인 파일 즉, 미리 서버에 저장되어 있는 파일
서버에 저장된 그대로를 서비스해주는 파일을 의미합니다.
동적파일은? 서버의 데이터들이 어느정도 가공된 다음 보여지는 파일(상황에 따라 달라질 수 있음.)

정적파일! 
- Static : 개발자가 서버를 개발할 때 미리 넣어놓은 정적파일(img, js, css)
- Media : 사용자가 업로드 할 수 있는 파일

blog앱 안에 static 폴더를 만들어용
폴더 안에 사진을 넣습니당
귀여운 춘배가 들어갔죵

이제 settings.py에 들어가서 설정을 바꿔줄건데용

마지막 즈음에 STATIC_URL = '/static/' 이부분 있지요?

그 밑에 이렇게 써줍니당

STATUCFILES_DIRS = [
    os.path.join(BASE_DIR, 'blog', 'static')
]
# 현재 static파일이 어디에 있는지! 

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# static 파일을 어디에 모을건지!

그리고 맨 위로 가서 import os를 추가해줍니다!

그 후에 터미널창에 python manage.py collectstatic 해줍니다
이러면 blog안에 static파일 저장해놨던 것들이 복사가 돼서 한곳에 모아집니다.
왜 모으느느냐? 그건 배포할때 알게 되실거에욥!
admin폴더는 우리가 자주 쓰는 admin페이지의 css, js가 담겨있어요

이제 base.html로 이동해서 
<body>바로 아래에 {% load static %}를 입력해줍니다
그러고 Navbar 있는 a태그 부분에 Navbar대신 우리 귀여운 춘배를 넣어줍시다
<img src="{% static '춘배.png' %}" alt="" width="60" height="60">

static은 
사용자가 사진 보여줘! 하면 서버가 응 그래! 하고 저장된 사진을 줍니다.

media는
사용자가 어떤 사진을 업로드할게~ 합니다 그럼 서버가 그걸 저장한 뒤에,
사용자가 업로드한사진 보여줘! 하면 서버가 응 그래! 하고 저장된 사진을 보여 줍니다.

사실 static이나 media는 그 사진 그대로를 보내주는게 아니라, 
웹 통신은 url 통신이기 때문에 해당 사진의 url을 보여주는 거에요!

이번에도 settings.py를 건들건들 해봅시당

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# 이용자가 업로드한 파일을 모으는 곳
MEDIA_URL = '/media/'
# 사용자에게 보여주는 media url 설정해줌

얘들을 추가해주시구, media의 url을 건드려봐야합니다 testproject/urls.py로 가죠

from django.conf import settings
from django.conf.urls.static import static                ->추가해주시고

urlpatterns =[
    ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) -> 추가해줍니다
static과 media를 병렬적으로 연결해준다는 뜻인데, 사실 잘 모르게쒀여 이건 한번 이렇게 써두면 끗

이미지를 업로드 할 수 있도록 models.py에 이미지를 추가해줍니다.
models.py에 가서

image = models.ImageField(upload_to = "blog/", blank=True, null=True)
추가해줍니다.

upload_to는 업로드할 폴더를 지정해줍니다. settings.py에서 MEDIA_URL로 지정해둔 media 폴더 안에
blog폴더를 만들어서 관리하겠다! 하는 설정입니다.
blank랑 null을 true로 안하면 너 왜 사진 안올려!! 하면서 에러가 뻥뻥 터져요

pip install pillow를 해줘야 합니다. 
-> 왜? django 웹프레임워크에 따로 이미지를 관리해주는 기능이 없어서 따로 설치를 해줘야 해요

저희가 맘대로 이미지를 끼워 넣었기 때문에 데이터베이스가 꼬였을거에요!
기존에 있던 migration파일을 삭제해주도록 합니다
잘 따라하세요오

blog안에 migrations폴더 안에 001initial 삭제
blog안에 migrations폴더 안에 __pycache__안에 001initial 삭제
그리고 blog밖으로 나가서 dbsqlite도 삭제

자 삭제가 다 되었으니 다시 
python manage.py makaemigrations
python manage.py migrate
한 뒤에, 
python manage.py createsuperuser도 해줍니당 -> 아까 migrate지우면서 다 날아갔어요!

하고 이제 런서버 딴따
쨘 데이터들이 싹 사라지고
admin페이지에 들어가서 로그인을 해줍니당
Blog 글 작성 틀을 봤을때 image가 추가됐죠?
이제 admin말고 웹사이트에서 직접 추가할 수 있게 해줍시당

new.html에 들어가셔서
작성자와 본문 사이에
<p>사진 : <input type="file" name="image"></p>
삽입 타입은 file이야! 해주고, 위에
<form action="{%url 'create'%}" method="post" enctype="multipart/form-data">
인코딩 타입을 추가해줘야 파일요청을 잘 수행할 수 있게 됩니다.

자 그리고 이제 views.py에 가서
create함수에 한줄 추가해줍시다
new_blog.image = request.FILES['image'] -> 'image는 우리가 아까 new.html에서 설정 했죠?

이제 그 사진을 detail에서도 보여줘야죠?
detail.html로 가서
<p>{{blog.body}}</p>위에


<p><img src="{{blog.image.url}}" alt=""></p>를 추가해줍니다.


근데! image가 없을 경우 detail화면에서 에러가 날 수 있으니

{% if blog.image %}
    <p><img src="{{blog.image.url}}" alt=""></p>
{% endif }

이렇게 if문을 걸어줍니다!!
쨔잔 여러분은 이제 인스타그램 글을 작성 하실수 있게 되었어요(과제 살짝 언급)

장고에서는 form이라는것을 제공하는데 
폼태그 생각나시죠? 그거랑 똑같아요! 입력받는 공간! 이라고 생각하시면 편해요
사용자가 데이터베이스에 형식에 맞게끔 보내주는 건데,, forms.py라는 파일 안에 만들어 줄겁니다!
데이터베이스의 모델이 하나씩 바뀔때마다 저희는 하나씩 함수를 바꿔주고 막 그랬잖아요
그걸 안할 수 있게 도와주는 친구이고, 유효성검사를 더 편하게 사용할 수 있게 합니당!

아아 너무 어려워요,,, 하시면 그냥 장고에서 주는 입력공간이다! 라고 알고 계시면 될거 같고 
일단 실습 바로 들어가면서 얘기를 계속 해볼게욥

BLOG 프로젝트 계속 이어서 진행 할 예정입니다!
blog 앱 폴더에 forms.py를 만들어 줍니다.

from django import forms
from .models import Blog

class BlogForm(forms.ModelForm):
    class Meta:
        model = Blog
        fields = ['title', 'writer', 'body', 'image'] 

내부에 써준 메타 클래스는 이름표 역할을 합니다
fields를 연결해서 blog를 만들어 줄것이다! 라는 역할을 한다정도로만 알고계시면 됩니다.

views.py에 가서 forms.py를 import해줍니다.

from .forms import BlogForm

new 함수를 요로코롬 수정해줍니다.

def new(request):
    form = BlogForm()
    return render(request, 'new.html', {'form':form})

new를 건드렸으니, new.html에서
    <p>제목 : <input type="text" name="title"></p>
    <p>작성자 : <input type="text" name="writer"></p>
    <p>사진 : <input type="file" name="image"></p>
    본문 : <textarea name="body" id="" cols="30" rows="10"></textarea>
요 아가들을 몽땅 지워줍니다.

그 자리에 {{form.as_p}} 를 입력해줍니다. form을 p태그에 감싸서 넣겠다는 뜻!
p자리에 다른 뭐 예를 들어 table로 감쌀 수도 있고, 개인 취향이니 아무렇게 하시면 되겠습니당
저는 p태그가 제일 이쁘더라구요

이제 유효성 검사를 해보는걸 알아볼건데
views.py에 가서 create함수를 싹 뜯어 고칠거에요
사실 여기 명시한 이 내용들이 유효성 검사를 하는건데
이걸 form이 대신 해주도록 간단하게 바꿔주는 거죠

    new_blog = Blog()
    new_blog.title = request.POST['title']
    new_blog.writer = request.POST['writer']
    new_blog.body = request.POST['body']
    new_blog.pub_date = timezone.now()
    new_blog.image = request.FILES['image']
    new_blog.save()

얘들을 싹 지워줍니다.

def create(request):
    form = BlogForm(request.POST, request.FILES)   ->POST와 파일을 받을거야아
    if form.is_valid(): 		   	    -> form이 유효하다면(형식이 잘 지켜졌다면)
        new_blog = form.save(commit=False)	    -> new_blog에 그 값을 임시저장
        new_blog.pub_date = timezone.now()         -> pub_date는 따로 받아줌
        new_blog.save()			    -> 저장해주고
        return redirect('detail', new_blog.id)	    -> 유효하면 detail로 redirect
    return redirect('home')			    -> 유효하지 않으면 home으로 redirect


자 이제 대망의 마지막 주제
회원가입/로그인/로그아웃 즉, User관리에 대해서 알아보겠습니다
일단 간단한 이론을 듣고! 바로 실습을 들어갈건데, 
여러명의 사용자가 서버에 요청하고 그러면 막 구별이 되어야하잖아요? 그럴 때 쓰이는 겁니다.
django에서 제공해주는 User기능들 위주로 사용하다보니 사실 이론만 이해하고 실습은
따라치기만 해도 무방합니다!

여러분도 종종 확인 하셨을수도 있는데 admin안에 Users가 있어요..! 두둥
저희가 만들었던 superuser도 user중 하나에요
기존에 제공 받던 User 모델말고 저희 마음대로 커스텀을 할 수 있어용

myvenv/Lib/site-packages/django/contrib/auth/models.py 가보면 
우와아아아 이미 만들어진 모델들을 확인할 수 있어요!

장고에서 제공해주는 auth!
Authentication : 인증
사용자     ->     서버
        (회원정보)
      회원가입 요청

사용자     ->     서버     ->       데이터베이스
                         회원정보 저장

사용자     ->     서버     ->       데이터베이스
                            얘 맞아?
	 <-	        <-                            
	토큰	    ㅇㅇ 맞아

머 암튼 설명 주루루루
자 그럼 이론은 끝났습니다. 대망의 마지막 주제 실습을 진행 하도록 하죠!
저희가 만들고있는 blog로 갑시당
일단 django-admin startapp account 해줍니다.
새 앱을 만들었으니 settings.py에 가서 'account' 추가해줍니당

자 이제부터 헷갈릴 수 있으니 잘 따라해야해용!
장고에서 이미 User라는 모델을 가지고 있다고 앞에서 봤었죠?
모델은 굳이 안만들어도 됩니다. 
account에 있는 views.py로 갑니다.

from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
추가!

def login_view(request):
    form = AuthenticationForm()
    return render(request, 'login.html', {'form':form})
추가해줍니당

그리고 account에도 urls.py를 만들어줘욧

from django.urls import path
from .views import * 

urlpatterns = [
    path('login/', login_view, name="login"),(추가)
]

추가!(blog 안에 있는 urls.py 복붙하면 편해오)
accounts 도 urls가 새로 생겼으니까
상위 프로젝트에 있는 urls.py 에 가서 추가를 해줘야합니다.

path('account/', include('account.urls')),
추가해줘용

account안에 templates 폴더 생성 후, login.html만들어 줍니다.
기본 틀은 new.html꺼를 배껴옵시다! 복붙 ㄱㄱㄱㄱ 네비게이션바도 배껴 옵시당

{% extends 'base.html' %}

{% block content %}

    <h1>Login</h1>                                    ->(수정)
    
    <form action="" method="post">               ->(수정)
        {% csrf_token %}
        {{form.as_p}}
        <button type="submit">submit</button>
    </form>

{% endblock %}

그리고 이걸 네비게이션 바에 링크를 달아줄건데, 대충 27번째줄~30번째줄 사이에 Link라고 적힌 a태그
<a class="nav-link" href="{% url 'login' %}">Login</a> 수정해줌

와하 런서버 돌려보면 이제 뜨죠? 이제 액션을 넣어서 로그인이 되게 할거에용
자아, login.html로 가서 
<form action="{% url 'login' %}" method="post"> 수정 헤주시고

진짜 로그인이 돌아가게끔 장고에서 제공해주는 대로 기본 로그인 기능을 구현할겁니다!
엥 이게 뭐야! 너무 어렵자나! 하실텐데.. 일단 제가 해석을 줄줄줄 하면서 받아 적도록 할게요 잘 봐주세요!
(import도 추가 됐고, 암튼 많이 바뀜)


from django.shortcuts import render, redirect
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from django.contrib.auth import authenticate, login, logout

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request=request, data = request.POST)
        if form.is_valid():
            username = form.cleaned_data.get("username")
            password = form.cleaned_data.get("password")
            user = authenticate(request=request, username=username, password=password)
            if user is not None:
                login(request, user)
        return redirect("home")

    else:
        form = AuthenticationForm()
        return render(request, 'login.html', {'form':form})

def logout_view(request):
    logout(request)
    return redirect("home")


로그아웃 기능은 굳이 html도 필요없고 간단하기도 해서 바로 만들었고, urls.py에 가서 연결만 해주면 됩니다.
urls.py로 가줍니다. 
path('logout/', logout_view, name="logout"), 추가!
쟈잔
 
그리고 로그인 버튼 옆에 로그아웃 링크를 넣어줍시다!
base.html가서
로그인 링크 밑에 복붙!

<li class="nav-item">
    <a class="nav-link" href="{% url 'logout' %}">Logout</a>
</li>
쨘

다들 슈퍼유저 기억하시나욤!??
그걸로 테스트가 가능합니다!

근데 로그인을 하더라도 아무런 변화가 없어서 테스트가 잘 안될거에요..흑흑
그래서 home.html로 갑시당

    {% if user.is_authenticated %}
        {{user.username}}
    {% endif %}
이걸 {% block content %} 얘 밑에다가 추가추가!

런서버 슝슝 쨔잔 로그인 로그아웃 완성!!

자아아ㅏ 회원가입만 추가하면 오늘 수업은 끝납니다

views.py가서 
def register_view(request):
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
        return redirect("home")
    else :   
        form = UserCreationForm()
        return render(request, 'signup.html', {'form':form})



urls.py가서
path('signup/', register_view, name="signup"), 추가!

그리고 signup.html만들어용

{% extends 'base.html' %}

{% block content %}

    <h1>Sign Up</h1>

    <form action="{% url 'signup' %}" method="post">
        {% csrf_token %}
        {{form.as_p}}
        <button type="submit">submit</button>
    </form>

{% endblock %}
(로그인 복붙이야~)


그리고 base.html에
<li class="nav-item">
    <a class="nav-link" href="{% url 'signup' %}">Signup</a>
</li>
추가추가!

자아아 런서버 슝슝~

흠,,근데 로그인을 한 상태인데 로그인 버튼이 있고 로그인을 안했을때도 로그아웃 버튼이 있는게 좀 거슬리네요
이거는 아까 사용자 이름 출력해줄때 썼던 if문을 응용하면 쉽게 적용 할 수 있습니당.
base.html로 슝슝슝
{% if not user.is_authenticated %}랑 {% if user.is_authenticated %} 알아서 씌워줌

짜잔 됐죠?
이것이 장고에서 기본으로 제공해주는 모델을 이용한 유저 관리 시스템인데
account/models.py에 들어가서 사용자가 직접 커스텀 할 수 있어요!
그 부분은 classlion에잘 나와있으니 과제하시다가 참고할 일이 생기면 직접 해보시는걸 추천 합니당
